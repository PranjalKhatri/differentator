`timescale 1ns / 1ps

module multiplier #(
    parameter IN_WIDTH = 8  // Input width (default: 8-bit)
)(
    input signed [IN_WIDTH-1:0] in1, 
    input signed [IN_WIDTH-1:0] in2,
    output signed [2*IN_WIDTH-1:0] out
);
    assign out = in1 * in2;
endmodule

module adder_subtractor #(
    parameter WIDTH = 16 // Default input width
)(
    input signed [WIDTH-1:0] in1, 
    input signed [WIDTH-1:0] in2,
    input add_sub, // 0 for addition, 1 for subtraction
    output signed [WIDTH:0] out // Extra bit for carry/borrow
);
    assign out = add_sub ? (in1 - in2) : (in1 + in2);
    always @(out)begin
    $display("Adder/Subtractor: in1 : %d in2 : %d  sub? %d out: %d", in1, in2, add_sub, out);
    end
endmodule

module comparator #(parameter WIDTH = 4)(
    input [WIDTH-1:0] A, B,
    output reg A_gt_B, A_lt_B, A_eq_B
);

    always @(*) begin
        if (A > B) begin
            A_gt_B = 1;
            A_lt_B = 0;
            A_eq_B = 0;
        end else if (A < B) begin
            A_gt_B = 0;
            A_lt_B = 1;
            A_eq_B = 0;
        else begin
            A_gt_B = 0;
            A_lt_B = 0;
            A_eq_B = 1;
        end
    end

endmodule

